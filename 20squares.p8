pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--twenty squares
--by ogmobot
function _init()
	board=newboard()
	state="title"
	turn=1
	substate="rolling"
	statetimer=0
	badluck=false
	cursx,cursy=128,128
	dests={}
end
-->8
function _update()
	if statetimer>0 then
		statetimer-=1
		return
	end
	globals.bgcol=0
	if state=="game" then
		if substate=="rolling" then
			if btnp(❎) or 1 then
				die=roll()
				substate="choosing"
				c=candidates(board,turn,die)
				ptr=0
				statetimer=10
			end
		elseif substate=="choosing" then
			if #c==0 then
				badluck=true
				statetimer=45
				substate="cleanup"
				sfx(3)
			else
				if (btnp(⬅️)) ptr=(ptr-1)%#c
				if (btnp(➡️)) ptr=(ptr+1)%#c
				activepiece=c[ptr+1]
				cursx,cursy=activepiece.x,activepiece.y
				if btnp(❎) or btnp(🅾️) then
					chosenpiece=c[ptr+1]
					destn=chosenpiece.sq+die
					dests={}
					for i=chosenpiece.sq,destn do
						add(dests,i)
					end
					del(board[chosenpiece.sq],chosenpiece)
					add(board[destn],chosenpiece)
					chosenpiece.sq=destn
					destx,desty=sqpos(dests[1],chosenpiece.side)
					substate="moving"
					statetimer=10
					cursx,cursy=128,128
				end
 		end
		elseif substate=="moving" then
			if chosenpiece.x==destx and chosenpiece.y==desty then
				del(dests,dests[1])
				if #dests>0 then
					sfx(1)
					destx,desty=sqpos(dests[1],chosenpiece.side)
					statetimer=0
				else
					if globals.reroll[destn] then
						sfx(4)
						extraturn=true
						globals.bgcol=1
					else
						--sfx(0)
						extraturn=false
					end
					substate="cleanup"
					if destn>=6 and destn<=13 then
						for q in all(board[destn]) do
							if chosenpiece.side~=q.side then
								sfx(2)
								del(board[q.sq],q)
								add(board[1],q)
								q.sq=1
								destn=1
								destx,desty=sqpos(1,q.side)
								chosenpiece=q
								substate="moving"
								globals.bgcol=9
								break
							end
						end
					end
					statetimer=2
				end
			end
			if (chosenpiece.x<destx) chosenpiece.x+=globals.spd
			if (chosenpiece.x>destx) chosenpiece.x-=globals.spd
			if (chosenpiece.y<desty) chosenpiece.y+=globals.spd
			if (chosenpiece.y>desty) chosenpiece.y-=globals.spd
		elseif substate=="cleanup" then
			badluck=false
			if countpieces(16,1)>=globals.numpieces then
				state="gameover"
				winner=1
			elseif countpieces(16,2)>=globals.numpieces then
				state="gameover"
				winner=2
			end
			if not extraturn then
				turn=3-turn
			end
			extraturn=false
			substate="rolling"
		end
	elseif state=="gameover" then
		if btnp(❎) then
			_init()
		end
	elseif state=="title" then
		if btnp(❎) then
			sfx(2)
			state="game"
			statetimer=3
		end
	end
end
-->8
function _draw()
	if state=="game" then
	cls(globals.bgcol)
		--draw the board
		for row=0,7 do
			for col=0,2 do
				if mget(2*col,2*row)>0 then
					spr(globals.spr_empty,
						globals.boardx+(16*col),
						globals.boardy+(16*row),
						2,2)
				end
				map(2*col,2*row,
					globals.boardx+(16*col),
					globals.boardy+(16*row),
					2,2)
			end
		end
		--draw the pieces
		for pieces in all(board) do
			for p in all(pieces) do
				spr(p.spr,p.x,p.y,2,2)
			end
		end
		if substate=="choosing" and #c>0 and statetimer==0 then
			spr(globals.spr_cursor,cursx,cursy,2,2)
		end
		--numbers at start, end
		niceprint(countpieces(1,1),globals.boardx-25,globals.boardy+53,globals.p1col)
		niceprint(countpieces(16,1),globals.boardx-25,globals.boardy+101,globals.p1col)
		niceprint(countpieces(1,2),globals.boardx+71,globals.boardy+53,globals.p2col)
		niceprint(countpieces(16,2),globals.boardx+71,globals.boardy+101,globals.p2col)
		--print player
		cursor(0,0)
		if turn==1 then
			color(globals.p1col)
		else
			color(globals.p2col)
		end
		print("player "..turn,1,1)
		if substate~="rolling" then
			print("roll:"..die,1,8)
			if (badluck) then
				print("bad luck!",1,15)
			end
		end
	elseif state=="gameover" then
		if winner==1 then
			niceprint("player 1 wins!",globals.boardx-4,globals.boardy+22,globals.p1col)
		else
			niceprint("player 2 wins!",globals.boardx-4,globals.boardy+22,globals.p2col)
		end
	elseif state=="title" then
		cls(globals.bgcol)
		spr(8,24,32,8,2)
		spr(46,88,32,2,2)
		print("the royal game of ur",23,50,4)
		niceprint("press ❎ to start ",29,84,5)
	end
--	for x,y in pairs(board) do
--		print(x.." "..#y)
--	end
end
-->8
make_piece=function(side)
	--create game piece
	t={}
	t.side=side
	t.spr=2*side
	t.x,t.y=0,0
	t.sq=1
	return t
end

roll=function()
	--roll dice
	total=0
	for i=1,4 do
		total=total+flr(rnd(2))
	end
	return total
end

candidates=function(b,s,r)
	--board, side, roll
	if (r==0) return {}
	opts={}
	for n,pieces in pairs(b) do
		target=n+r
		legal=true
		for p in all(pieces) do
			if p.side==s and target<=16 then
				if target>=2 and target<=5 then
					--bearing on
					for q in all(b[target]) do
						if (q.side==s) legal=false
					end
					if (legal) add(opts,p)
				elseif target>=6 and target<=13 then
					--centre
					for q in all(b[target]) do
						if (q.side==s or globals.reroll[target]) legal=false
					end
					if (legal) add(opts,p)
				elseif target>=14 and target<=15 then
					--bearing off
					for q in all(b[target]) do
						if (q.side==s) legal=false
					end
					if (legal) add(opts,p)
				elseif target==16 then
					add(opts,p)
				end
				legal=false
			end
		end
	end
	return opts
end

countpieces=function(sq,side)
	total=0
	for p in all(board[sq]) do
		if p.side==side then
			total+=1
		end
	end
	return total
end

niceprint=function(msg,x,y,col)
	--print with border
	msg=""..msg
	color(0)
	rectfill(x-2,y-2,x+(4*#msg),y+6)
	color(col)
	rect(x-2,y-2,x+(4*#msg),y+6)
	print(msg,x,y)
end

sqpos=function(n,side)
	--find x and y location of
	--nth square of the board
	if n==1 then
		--start
		xoff=2
		yres=globals.boardy+48
	elseif n<6 then
		--bear on
		xoff=1
		yres=globals.boardy+48-(16*(n-2))
	elseif n<14 then
		--centre
		xoff=0
		yres=globals.boardy+(16*(n-6))
	elseif n<16 then
		--bear off
		xoff=1
		yres=globals.boardy+112-(16*(n-14))
	else
		--finish
		xoff=2
		yres=globals.boardy+96
	end
	xres=globals.boardx+16
	xres=xres+(2*side-3)*xoff*16
	return xres,yres
end

newboard=function()
	local board={}
	for i=1,16 do
		board[i]={}
	end
	for i=1,globals.numpieces do
		for side=1,2 do
			t=make_piece(side)
			t.x,t.y=sqpos(1,side)
			add(board[1],t)
		end
	end
	return board
end
-->8
globals={
	boardx=40,
	boardy=0,
	spr_empty=32,
	spr_cursor=6,
	reroll={
		[5]=true,
		[9]=true,
		[15]=true
	},
	bgcol=0,
	p1col=12,
	p2col=14,
	spd=4,
	numpieces=7
}
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000aaaaaa000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000cccc000000000000eeee0000000000aa0000aa00000009999999000000000000000000000000000009999000000000000000000000
000000000000000000000cccccc0000000000eeeeee00000000aa000000aa0000000009000000000000000000000000000000090000000000000000000000000
00000000000000000000cccccccc00000000eeeeeeee0000000a00000000a0000000009000000000000000000000000000000090000000000000000000000000
00000000000000000000cccccccc00000000eeeeeeee0000000a00000000a0000000009000000000000000000009000000000090000000000000000000000000
00000000000000000000cccccccc00000000eeeeeeee0000000a00000000a0000000009009009009009900999099990900900009990009990900900999099900
000000000000000000001cccccc1000000002eeeeee20000000a00000000a0000000009009009009090090900909000900900000009090090900909009090009
0000000000000000000001cccc100000000002eeee200000000aa000000aa0000044009009009009099990900909000900900000009090090900909009090009
0000000000000000000000111100000000000022220000000000aa0000aa00000400409009009009090000900909000900900000009090090900909009090009
00000000000000000000000000000000000000000000000000000aaaaaa000004004009009999990009900900900990099900099990009990099900999090000
00000000000000000000000000000000000000000000000000000000000000004000004444444444444444444444444444944444444444494444444444444444
00000000000000000000000000000000000000000000000000000000000000000400040000000000000000000000000000900000000000090000000000000000
00000000000000000000000000000000000000000000000000000000000000000044400000000000000000000000000099000000000000099000000000000000
55555555555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54444444444444450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
54ffffffffffff450000002001000000000550000005500000000000000000000011011001101100000055500555000000505550555055000000000000000000
54ffffffffffff450000022011100000005115000051150000010100001010000011011001101100000500055000500000500500050000000000000000000000
54ffffffffffff450000022211100000005115000051150000001000000100000000000000000000005001000010050000000000000005000000000000000000
54ffffffffffff450001122211222000000550000005500000010100001010000000011001100000000500055000500000500110011055000000000000000000
54ffffffffffff450011112212222200000000055000000000000000000000000000011001100000000055500555000000550110011005000000000000000000
54ffffffffffff450001111222220000000000511500000000000000000000000000000000000000000000000000000000500001100000000000000000000000
54ffffffffffff450000222221111000000000511500000000000000000000000000000000000000000000000000000000000001100005009900099900000000
54ffffffffffff450022222122111100000000055000000000000000000000000000011001100000000055500555000000500110011055000090900000000000
54ffffffffffff450002221122211000000550000005500000010100001010000000011001100000000500055000500000550110011005009990099004440000
54ffffffffffff450000011122200000005115000051150000001000000100000000000000000000005001000010050000500000000000000000000940004000
54ffffffffffff450000011102200000005115000051150000010100001010000011011001101100000500055000500000000050005005009900999400000400
54ffffffffffff450000001002000000000550000005500000000000000000000011011001101100000055500555000000550555055505004444444000400400
54444444444444450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004004000
55555555555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000440000
__gff__
0000800000000000000000000000000000000000000000000000000000000000010002000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
2223282922230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3233383932330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2a2b24252a2b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3a3b34353a3b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2425262724250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3435363734350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2a2b22232a2b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3a3b32333a3b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000242500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000343500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000262700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000363700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22232a2b22230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
32333a3b32330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2c2d24252c2d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3c3d34353c3d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000a00001832500500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010a00000032500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010a00001f655183551b3551f35523355000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010a00001634216342163421634513342133421334213345000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010a0000183551c355203552435527355000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
